syntax = "proto3";

import "google/protobuf/timestamp.proto";

enum OrderType{
	BUY_ORDER_TYPE = 0;
	CELL_ORDER_TYPE = 1;
}

enum StatmentType{
	PENETRATION_UP_STATMENT_TYPE = 0;
	PENETRATION_DOWN_STATMENT_TYPE = 1;
}

enum DeadlineAction{
	REMOVE_ORDER_DEADLINE_ACTION = 0;
	EXECUTE_ORDER_DEADLINE_ACTION = 1;
}

enum ErrorsCode{
	NO_ERROR = 0;
	UNCNOWN_ERROR = 1;
	INVALID_TOKEN_ERROR = 2;
	TOKEN_DOES_NOT_EXIST_ERROR = 3;
	ORDER_DOES_NOT_EXIST_OR_YOU_DONT_HAVE_ACCESS_TO_IT_ERROR = 4;
}

message Error{
	ErrorsCode code = 1;
	string comment = 2;
}

message Score{
	int64 token_id = 1;
}

message Order{
	OrderType order_type = 1;
	Score score = 2;
	string figi = 3;
	int64 count = 4;
	double cost = 5;
}

message Border{
	Score score = 1;
	string figi = 2;
	double cost = 3;
}

message Condition{
	StatmentType statment_type = 1;
	Border border = 2;
}

message PendingOrder{
	Condition condition = 1;
	Order order = 2;
	google.protobuf.Timestamp deadline = 3;
	DeadlineAction dedline_action = 4;
}

message SetTokenRequest{
	string token = 1;
}

message SetTokenResponce{
	Error error = 1;
	int64 token_id = 2;
}

message UpdateTokenRequest{
	string token_before = 1;
	string token_after = 2;
}

message UpdateTokenResponce{
	Error error = 1;
}


message AddOrdersRequest{
	message AddOrdersReq{
		PendingOrder order = 1;
		int64 temporary_id = 2;
	}
	repeated AddOrdersReq orders = 1;
}

message AddOrdersResponce{
	message AddOrdersResp{
		int64 temporary_id = 1;
		int64 ID = 2;
	}
	Error error = 1;
	repeated AddOrdersResp orders = 2;
}

message GetOrderByIDRequest{
	int64 order_id = 1;
}

message GetOrderByIDResponce{
	Error error = 1;
	PendingOrder order = 2;
}

message RemoveOrderByIDRequest{
	int64 order_id = 1;
}

message RemoveOrderByIDResponce{
	Error error = 1;
}

message ChaingeOrderRequest{
	int64 id = 1;
	PendingOrder new_order = 2;
}

message ChaingeOrderResponce{
	Error error = 1;
}

service PendingOrdersService {
  /* Сохраняет tinkoff api токен, присваевает ему id и возвращает его;
     id действителен только в рамках текущего соединения
     id всегда больше 0 */
  rpc SetToken(SetTokenRequest) returns (SetTokenResponce);
  /* Заменят один токен на другой во всем сервисе
     ВКЛЮЧАЯ УЖЕ УСТАНОВЛЕННЫЕ ОРДЕРА!!!!;
     Нужен для обновления токена в случае прекращения его действия */
  rpc UpdateToken(UpdateTokenRequest) returns (UpdateTokenResponce);
  /* Устанавливает отложенные ордера;
     Возвращает id присвоенные ордерам;
     id всегда больше 0 */
  rpc AddOrders(AddOrdersRequest) returns (AddOrdersResponce);
  /* Возвращает отложеный ордер по его id; 
     выполняется только при условии что для всех токенов, 
     связанныйх с этим ордером в рамках данного соединения был вызван метод SetToken */
  rpc GetOrderByID(GetOrderByIDRequest) returns (GetOrderByIDResponce);
  /* Удаляет отложеный ордер по его id; 
     выполняется только при условии что для всех токенов, 
     связанныйх с этим ордером в рамках данного соединения был вызван метод SetToken */
  rpc RemoveOrderByID(RemoveOrderByIDRequest) returns (RemoveOrderByIDResponce);
  /* изменяет ордер по его id
     выполняется только при условии что для всех токенов, 
     связанныйх с этим ордером в рамках данного соединения был вызван метод SetToken */
  rpc ChaingeOrder(ChaingeOrderRequest) returns (ChaingeOrderResponce);
}
